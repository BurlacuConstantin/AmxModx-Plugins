/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <fakemeta>
#include <dhudmessage>

#define PLUGIN "CS:GO Sound Manager"
#define VERSION "0.1"
#define AUTHOR "AsuStar & VEN"

#define CONFIG_FILE "CSGO_SoundManager.ini"

#define COLORCODE_NORMAL 0x01
#define COLORCODE_TEAM 0x03
#define COLORCODE_LOCATION 0x04

#pragma tabsize 0

new Array:ct_grenade_sound, Array:ct_flashbang_sound, Array:ct_smoke_sound
new Array:t_grenade_sound, Array:t_flashbang_sound, Array:t_smoke_sound
new Array:start_round_sound, Array:bomb_planted_sound

new Trie:dhudMsgText

new Float:g_dhud_x_pos, Float:g_dhud_y_pos


enum grenade 
{
	GRENADE_HE,
	GRENADE_FLASH,
	GRENADE_SMOKE
}

new const g_grenade_description[_:grenade][] = 
{
	" [explosive]",
	" [flashbang]",
	" [smokegren]"
}

enum color 
{
	COLOR_NORMAL,
	COLOR_RED,
	COLOR_BLUE,
	COLOR_GRAY,
	COLOR_GREEN
}

new const g_color_teamname[_:color][] = 
{
	"",
	"TERRORIST",
	"CT",
	"SPECTATOR",
	""
}

new const g_grenade_desccolor[_:grenade] = 
{
	COLOR_RED,
	COLOR_GRAY,
	COLOR_GREEN
}

new const g_color_code[_:color] = 
{
	COLORCODE_NORMAL,
	COLORCODE_TEAM,
	COLORCODE_TEAM,
	COLORCODE_TEAM,
	COLORCODE_LOCATION
}

new const g_grenade_weaponid[_:grenade] = 
{
	CSW_HEGRENADE,
	CSW_FLASHBANG,
	CSW_SMOKEGRENADE
}

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_forward(FM_EmitSound,"fw_emitsound")
	register_message(get_user_msgid("SendAudio"), "message_SendAudio")
	register_message(get_user_msgid("TextMsg"), "message_SendText")
	register_event("HLTV", "event_new_round", "a", "1=0", "2=0")
	
}

public plugin_end()
{
	ArrayDestroy(ct_grenade_sound)
	ArrayDestroy(ct_flashbang_sound)
	ArrayDestroy(ct_smoke_sound)
	ArrayDestroy(t_grenade_sound)
	ArrayDestroy(t_flashbang_sound)
	ArrayDestroy(t_smoke_sound)
	ArrayDestroy(start_round_sound)
	ArrayDestroy(bomb_planted_sound)
	
	TrieDestroy(dhudMsgText)
}

public plugin_precache()
{
	ct_grenade_sound = ArrayCreate(64, 1)
	ct_flashbang_sound = ArrayCreate(64, 1)
	ct_smoke_sound = ArrayCreate(64, 1)
	t_grenade_sound = ArrayCreate(64, 1)
	t_flashbang_sound = ArrayCreate(64, 1)
	t_smoke_sound = ArrayCreate(64, 1)
	start_round_sound = ArrayCreate(64, 1);
	bomb_planted_sound = ArrayCreate(64, 1)
	
	dhudMsgText = TrieCreate()
	
	load_config_file()
	
	new i, buffer[128], temp_string[256]
	

	for(i = 0; i < ArraySize(ct_grenade_sound); i++)
	{
		ArrayGetString(ct_grenade_sound, i, temp_string, sizeof(temp_string))
		precache_sound(temp_string)
	}
	for(i = 0; i < ArraySize(ct_flashbang_sound); i++)
	{
		ArrayGetString(ct_flashbang_sound, i, temp_string, sizeof(temp_string))
		precache_sound(temp_string)
	}
	for(i = 0; i < ArraySize(ct_smoke_sound); i++)
	{
		ArrayGetString(ct_smoke_sound, i, temp_string, sizeof(temp_string))
		precache_sound(temp_string)
	}
	
	for(i = 0; i < ArraySize(t_grenade_sound); i++)
	{
		ArrayGetString(t_grenade_sound, i, temp_string, sizeof(temp_string))
		precache_sound(temp_string)
	}
	for(i = 0; i < ArraySize(t_flashbang_sound); i++)
	{
		ArrayGetString(t_flashbang_sound, i, temp_string, sizeof(temp_string))
		precache_sound(temp_string)
	}
	for(i = 0; i < ArraySize(t_smoke_sound); i++)
	{
		ArrayGetString(t_smoke_sound, i, temp_string, sizeof(temp_string))
		precache_sound(temp_string)
	}
	for(i = 0; i < ArraySize(start_round_sound); i++)
	{
		ArrayGetString(start_round_sound, i, temp_string, sizeof(temp_string))
	
		if(equal(temp_string[strlen(temp_string) - 4], ".mp3"))
		{
			format(buffer, charsmax(buffer), "sound/%s", temp_string)
			precache_generic(buffer)
		} 
		else 
		{
			precache_sound(temp_string)
		}
	}
	for(i = 0; i < ArraySize(bomb_planted_sound); i++)
	{
		ArrayGetString(bomb_planted_sound, i, temp_string, sizeof(temp_string))
	
		if(equal(temp_string[strlen(temp_string) - 4], ".mp3"))
		{
			format(buffer, charsmax(buffer), "sound/%s", temp_string)
			precache_generic(buffer)
		} 
		else 
		{
			precache_sound(temp_string)
		}
	}

}
	

public load_config_file()
{
	new path[64]
	get_configsdir(path, charsmax(path))
	format(path, charsmax(path), "%s/csgo/%s", path, CONFIG_FILE)
	
	// File not present
	if(!file_exists(path))
	{
		new error[100]
		formatex(error, sizeof(error) - 1, "[CS:GO Sound Manager]:Fisierul %s nu a fost detectat!", CONFIG_FILE)
		set_fail_state(error)
		return
	}
	
		// Set up some vars to hold parsing info
	new linedata[1024], key[64], value[960], section
	
	// Open customization file for reading
	new file = fopen(path, "rt")
	
	while (file && !feof(file))
	{
		// Read one line at a time
		fgets(file, linedata, charsmax(linedata))
		
		// Replace newlines with a null character to prevent headaches
		replace(linedata, charsmax(linedata), "^n", "")
		
		// Blank line or comment
		if (!linedata[0] || linedata[0] == ';') continue;
		
		// New section starting
		if (linedata[0] == '[')
		{
			section++
			continue;
		}
	
		// Get key and value(s)
		strtok(linedata, key, charsmax(key), value, charsmax(value), '=')

		// Trim spaces
		trim(key)
		trim(value)

		switch (section)
		{
			case 1:
			{
				if(equal(key, "CT_GRENADE"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(ct_grenade_sound, key)
					}
				}
				if(equal(key, "CT_FLASHBANG"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(ct_flashbang_sound, key)
					}
				}
				if(equal(key, "CT_SMOKE"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(ct_smoke_sound, key)
					}
				}
				if(equal(key, "T_GRENADE"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(t_grenade_sound, key)
					}
				}
				if(equal(key, "T_FLASHBANG"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(t_flashbang_sound, key)
					}
				}
				if(equal(key, "T_SMOKE"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(t_smoke_sound, key)
					}
				}
				if(equal(key, "START_ROUND_SOUND"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(start_round_sound, key)
					}
				}
				if(equal(key, "BOMB_PLANT_SOUND"))
				{
					// Parse sounds
					while(value[0] != 0 && strtok(value, key, charsmax(key), value, charsmax(value), ','))
					{
						// Trim spaces
						trim(key)
						trim(value)
						
						// Add to sounds array
						ArrayPushString(bomb_planted_sound, key)
						
					}
				}
			}
			case 2:
			{
				if(equal(key, "DHUD_MSG_X_POS"))
				{
					g_dhud_x_pos = str_to_float(value)
				}
				if(equal(key, "DHUD_MSG_Y_POS"))
				{
					g_dhud_y_pos = str_to_float(value)
				}
				if(equal(key, "BOMB_PLANTED_MSG"))
				{
					TrieSetString(dhudMsgText, "#Bomb_Planted", value)

				}
				if(equal(key, "CT_WIN_MSG"))
				{
					TrieSetString(dhudMsgText, "#CTs_Win", value)
				}
				if(equal(key, "T_WIN_MSG"))
				{
					TrieSetString(dhudMsgText, "#Terrorists_Win", value)
				}
				if(equal(key, "BOMB_DEFUSE_MSG"))
				{
					TrieSetString(dhudMsgText, "#Bomb_Defused", value)
				}
				if(equal(key, "GAME_COMM_MSG"))
				{
					TrieSetString(dhudMsgText, "#Game_Commencing", value)
				}
				if(equal(key, "SUCCES_BOMB_MSG"))
				{
					TrieSetString(dhudMsgText, "#Target_Bombed", value)
				}
				
			}
		}
	}
	if(file) fclose(file)
}

public message_SendAudio(msg_id, msg_dest, entity)
{
	if(get_msg_args() != 3 || get_msg_argtype(2) != ARG_STRING) 
		 return PLUGIN_CONTINUE

    new arg2[20]
    get_msg_arg_string(2, arg2, charsmax(arg2))
    
    if(equal(arg2[1], "!MRAD_FIREINHOLE"))
        return PLUGIN_HANDLED
    

    return PLUGIN_CONTINUE
}

public message_SendText(msgid, dest, id)
{
	if(get_msg_args() == 5)
	{
		static arg[32]
		get_msg_arg_string(5, arg, sizeof arg - 1)
		
		if (!equal(arg, "#Fire_in_the_hole"))
			return PLUGIN_CONTINUE

		get_msg_arg_string(2, arg, sizeof arg - 1)
		new caller = str_to_num(arg)
			if (!is_user_alive(caller))
			return PLUGIN_CONTINUE
		
		new clip, ammo, weapon
		weapon = get_user_weapon(caller, clip, ammo)
	
		for (new i; i < 3; ++i) 
		{
			if(g_grenade_weaponid[i] == weapon) 
			{
				static text[192]
				new pos = 0
				text[pos++] = g_color_code[COLOR_NORMAL]

				get_msg_arg_string(4, arg, sizeof arg - 1)
				pos += formatex(text[pos], sizeof text - pos - 1, "%s (RADIO): Fire in the hole!", arg)
				copy(text[++pos], sizeof text - pos - 1, g_grenade_description[i])

				new desccolor = g_grenade_desccolor[i]
			
				if ((text[--pos] = g_color_code[desccolor]) == COLORCODE_TEAM) 
				{
					static teamname[12]
					get_user_team(id, teamname, sizeof teamname - 1)

					if (!equal(teamname, g_color_teamname[desccolor])) 
					{
						msg_teaminfo(id, g_color_teamname[desccolor])
						msg_saytext(id, text)
						msg_teaminfo(id, teamname)

						return PLUGIN_HANDLED
					}
				}

				msg_saytext(id, text)

				return PLUGIN_HANDLED
			}
		}
	}
	else if(!id  && (get_msg_arg_int(1) == print_center || get_msg_arg_int(1) == print_notify)) 
	{
		new szMessage[32]
		get_msg_arg_string(2, szMessage, charsmax(szMessage))
		
		if(equal(szMessage, "#CTs_Win"))
		{
			TrieGetString(dhudMsgText, szMessage, szMessage, charsmax(szMessage))
			set_dhudmessage(5, 105, 255, g_dhud_x_pos, g_dhud_y_pos, 1, 2.0, 5.5)
			show_dhudmessage(0, szMessage)
			
			return PLUGIN_HANDLED
		}
		if(equal(szMessage, "#Terrorists_Win"))
		{
			TrieGetString(dhudMsgText, szMessage, szMessage, charsmax(szMessage))
			set_dhudmessage(255, 13, 13, g_dhud_x_pos, g_dhud_y_pos, 1, 2.0, 5.5)
			show_dhudmessage(0, szMessage)
			
			return PLUGIN_HANDLED
		}
		if(equal(szMessage, "#Bomb_Planted"))
		{
			TrieGetString(dhudMsgText, szMessage, szMessage, charsmax(szMessage))
			set_dhudmessage(255, 213, 0, g_dhud_x_pos, g_dhud_y_pos, 2, 2.0, 3.0)
			show_dhudmessage(0, szMessage)
			
			return PLUGIN_HANDLED
		}
		if(equal(szMessage, "#Bomb_Defused"))
		{
			TrieGetString(dhudMsgText, szMessage, szMessage, charsmax(szMessage))
			set_dhudmessage(85, 255, 0, g_dhud_x_pos, g_dhud_y_pos, 2, 2.0, 3.0)
			show_dhudmessage(0, szMessage)
			
			return PLUGIN_HANDLED
		}
		if(equal(szMessage, "#Game_Commencing"))
		{
			TrieGetString(dhudMsgText, szMessage, szMessage, charsmax(szMessage))
			set_dhudmessage(193, 171, 214, g_dhud_x_pos, g_dhud_y_pos, 2, 2.0, 3.0)
			show_dhudmessage(0, szMessage)
			
			return PLUGIN_HANDLED
		}
		if(equal(szMessage, "#Target_Bombed"))
		{
			TrieGetString(dhudMsgText, szMessage, szMessage, charsmax(szMessage))
			set_dhudmessage(85, 255, 0, g_dhud_x_pos, g_dhud_y_pos, 2, 2.0, 5.5)
			show_dhudmessage(0, szMessage)
			
			return PLUGIN_HANDLED
		}
		
	    return PLUGIN_HANDLED
		
	}
	return PLUGIN_CONTINUE
}

public grenade_throw(id,ent,wid)
{
	if(!is_user_alive(id))
		return
	
	new CsTeams:Team = cs_get_user_team(id)
	
	static sound[64]
	
	switch(Team) 
	{ 
		case CS_TEAM_CT:
		{
			switch(wid)
			{
				case CSW_HEGRENADE:
				{
					ArrayGetString(ct_grenade_sound, random_num(0, ArraySize(ct_grenade_sound) - 1), sound, charsmax(sound))
				}
				case CSW_FLASHBANG:
				{
					ArrayGetString(ct_flashbang_sound, random_num(0, ArraySize(ct_flashbang_sound) - 1), sound, charsmax(sound))
				}
				case CSW_SMOKEGRENADE:
				{
					ArrayGetString(ct_smoke_sound, random_num(0, ArraySize(ct_smoke_sound) - 1), sound, charsmax(sound))
				}
			}
			
			emit_sound(id, CHAN_WEAPON, sound , 1.0, ATTN_NORM, 0, PITCH_HIGH) 
		}
		case CS_TEAM_T:
		{
			switch(wid)
			{
				case CSW_HEGRENADE:
				{
					ArrayGetString(t_grenade_sound, random_num(0, ArraySize(t_grenade_sound) - 1), sound, charsmax(sound))
				}
				case CSW_FLASHBANG:
				{
					ArrayGetString(t_flashbang_sound, random_num(0, ArraySize(t_flashbang_sound) - 1), sound, charsmax(sound))
				}
				case CSW_SMOKEGRENADE:
				{
					ArrayGetString(t_smoke_sound, random_num(0, ArraySize(t_smoke_sound) - 1), sound, charsmax(sound))
				}
			}
			
			emit_sound(id, CHAN_WEAPON, sound , 1.0, ATTN_NORM, 0, PITCH_HIGH) 
		}
	}
}

public event_new_round()
{
	static temp_string[128]
	ArrayGetString(start_round_sound, random_num(0, ArraySize(start_round_sound) - 1), temp_string, sizeof(temp_string))
	PlaySound(0, temp_string)
}

public bomb_planted(id)
{
	static temp_string[128]
	ArrayGetString(bomb_planted_sound, random_num(0, ArraySize(bomb_planted_sound) - 1), temp_string, sizeof(temp_string))
	PlaySound(0, temp_string)
}

stock msg_teaminfo(id, teamname[]) 
{
	message_begin(MSG_ONE, get_user_msgid("TeamInfo"), _, id)
	write_byte(id)
	write_string(teamname)
	message_end()
}

stock msg_saytext(id, text[]) 
{
	message_begin(MSG_ONE, get_user_msgid("SayText"), _, id)
	write_byte(id)
	write_string(text)
	message_end()
}

stock PlaySound(id, const sound[])
{
	if(id == 0)
	{
		if(equal(sound[strlen(sound)-4], ".mp3"))
		{
			client_cmd(0, "mp3 play ^"sound/%s^"", sound)
		}
		else
		{
			client_cmd(0, "spk ^"%s^"", sound)
		}
	}
	else 
	{
		if(is_user_connected(id) && is_user_alive(id))
		{
			if(equal(sound[strlen(sound)-4], ".mp3"))
			{
				client_cmd(id, "mp3 play ^"sound/%s^"", sound)
			}
			else
			{
				client_cmd(id, "spk ^"%s^"", sound)
			}
		}
	}
}


/*
public fw_emitsound(id,channel,const sample[],Float:volume,Float:attenuation,fFlags,pitch)
{
	if(!is_user_connected(id))
	return FMRES_IGNORED
	
	new CsTeams:Team = cs_get_user_team(id)
	
	static sound[64]

	switch(Team) 
	{ 
		case CS_TEAM_CT:
		{
			if(!is_user_alive(id))
			return FMRES_IGNORED
			
			if(sample[0] == 'c' && sample[1] == 't' && sample[2] == '_' && sample[3] == 'f' && sample[4] == 'i' && sample[5] == 'r')
			{
				ArrayGetString(ct_flashbang_sound, random_num(0, ArraySize(ct_flashbang_sound) - 1), sound, charsmax(sound))
				emit_sound(id, channel, sound, volume, attenuation, fFlags, pitch)
				return FMRES_SUPERCEDE
			}
		}
		case CS_TEAM_T: 
		{
			
			if(sample[0] == 'f' && sample[1] == 'l' && sample[2] == 'a' && sample[3] == 's' && sample[4] == 'h')
			{
				ArrayGetString(ct_flashbang_sound, random_num(0, ArraySize(ct_flashbang_sound) - 1), sound, charsmax(sound))
				emit_sound(id, channel, sound, volume, attenuation, fFlags, pitch)
				return FMRES_SUPERCEDE
			}
			
		}
	} 
	
	return FMRES_IGNORED

}
*/
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1048\\ f0\\ fs16 \n\\ par }
*/
